// Preview file in Skala Preview (cmd p)

// Copyright (c) 2013 Marc Schwieterman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// configuration

var DEBUG = false

var PREVIEW_APPLICATION = "Preview"
var PREVIEW_TARGET_NAME = "Preview"

var PREVIEW_DIRECTORY_NAME = "com.marcisme.sketch-preview"
var LOG_PREFIX = "sketch-preview"
var PREVIEW_FILE_NAME = "preview.png"

// logging functions

function debug(message) {
  if (DEBUG) {
    logWithPrefix(message)
  }
}

function error(message) {
  logWithPrefix(message)
}

function logWithPrefix(message) {
  log(LOG_PREFIX + ": " + message)
}

// preview functions

function preview() {
  if (!isSupportedVersion()) {
    [doc showMessage:"Sketch 2 is no longer supported"]
    return
  }
  var previewTarget = findPreviewTarget()
  if (previewTarget) {
    writeAndOpenPreviewFile(previewTarget)
  }
  else {
    [doc showMessage:"The Preview plugin requires a selected Artboard or a slice named '" + PREVIEW_TARGET_NAME + "'"]
  }
}

function findPreviewTarget() {
  return findNamedPreviewTarget() || findSelectedPreviewTarget()
}

function findSelectedPreviewTarget() {
  debug("Searching for selected Artboard")
  var currentArtboard = [[doc currentPage] currentArtboard]
  if (currentArtboard) {
    debug("Found selected Artboard: " + [currentArtboard name])
  }
  else {
    debug("No Artboard selected")
  }
  return currentArtboard
}

function findNamedPreviewTarget() {
  debug("Searching for named preview slice: " + PREVIEW_TARGET_NAME)
  var targets = allTargets()
  for (var i = 0; i < [targets count]; i++) {
    var target = targets[i]
    if (isPreviewTarget([target name])) {
      debug("Found named preview slice")
      return target
    }
  }
  debug("No named preview slice found")
}

function allTargets() {
  if (isSupportedVersion()) {
    // Sketch 3
    return [[doc currentPage] exportableLayers]
  } else {
    error("Unable to search for target slice; Sketch implementation may have changed")
    // Return empty array, so we move on to the next strategy
    return [NSArray new]
  }
}

function isPreviewTarget(name) {
  return [name localizedCaseInsensitiveCompare:PREVIEW_TARGET_NAME] == NSOrderedSame
}

function writeAndOpenPreviewFile(previewTarget) {
  var previewFilePath = getPreviewFilePath()
  [doc saveArtboardOrSlice:resizedPreviewTarget(previewTarget) toFile:previewFilePath]
  openPreviewFile(previewFilePath)
}

function resizedPreviewTarget(previewTarget) {
  var config = new Config()
  if (config.getPreviewSize()) {
    return resizedLayer(previewTarget, config.getPreviewSize())
  }
  return previewTarget
}

function resizedLayer(layer, size) {
  var rect = [[layer absoluteRect] rect]
  return [MSExportRequest requestWithRect:rect scale:size]
}

function getPreviewFilePath() {
  return getPreviewDirectory() + "/" + PREVIEW_FILE_NAME
}

function getPreviewDirectory() {
  var fileManager = [NSFileManager defaultManager]
  var cachesURL = [[fileManager URLsForDirectory:NSCachesDirectory inDomains:NSUserDomainMask] lastObject]
  return [[cachesURL URLByAppendingPathComponent:PREVIEW_DIRECTORY_NAME] path]
}

function openPreviewFile(previewFilePath) {
  if(![[NSWorkspace sharedWorkspace] openFile:previewFilePath withApplication:PREVIEW_APPLICATION]]) {
    [doc showMessage:"Failed to open preview file; Make sure '" + PREVIEW_APPLICATION + "' is installed."]
  }
}

/* Begin common code */

function isSupportedVersion() {
  return [[doc currentPage] respondsToSelector:"exportableLayers"]
}

function Config() {

  this.PREVIEW_SIZE_LABELS = ["default", "0.5x", "1x", "1.5x", "2x", "3x"]

  var PREVIEW_DIRECTORY_NAME = "com.marcisme.sketch-preview"
  var CONFIG_FILE_NAME = "/config.plist"
  var PREVIEW_SIZES = [0.5, 1.0, 1.5, 2.0, 3.0]
  var configDictionary = loadConfigDictionary()
  var PREVIEW_SIZE_INDEX_KEY = "previewSizeIndex"

  this.getPreviewSize = function() {
    var previewSizeIndex = configDictionary[PREVIEW_SIZE_INDEX_KEY]
    if (previewSizeIndex) {
      return PREVIEW_SIZES[previewSizeIndex]
    }
  }

  this.getPreviewSizeLabelIndex = function() {
    if (this.getPreviewSize()) {
      return configDictionary[PREVIEW_SIZE_INDEX_KEY] + 1
    } else {
      return 0
    }
  }

  this.setPreviewSizeLabelIndex = function(previewSizeLabelIndex) {
    configDictionary[PREVIEW_SIZE_INDEX_KEY] = previewSizeLabelIndex - 1
  }

  this.save = function() {
    [configDictionary writeToURL:getConfigFileURL() atomically:true]
  }

  function loadConfigDictionary() {
    return [NSMutableDictionary dictionaryWithContentsOfURL:getConfigFileURL()] ||
      [NSMutableDictionary dictionary]
  }

  function getConfigFileURL() {
    var fileManager = [NSFileManager defaultManager]
    var applicationSupport = [[fileManager URLsForDirectory:NSCachesDirectory inDomains:NSUserDomainMask] lastObject]
    return [applicationSupport URLByAppendingPathComponent:PREVIEW_DIRECTORY_NAME + "/" + CONFIG_FILE_NAME]
  }

}

/* End common code */

preview()
